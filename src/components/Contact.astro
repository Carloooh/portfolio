---

---

  <section class="section contact center" id="contact">
    <h2 class="section__title translate" data-translate-key="contact">Contact</h2>
    <form id="my-form" action="https://formspree.io/f/mzblnaop" method="POST" class="contact-form">
      <div class="form-group">
        <label for="email" class="translate" data-translate-key="formemail">Your email:</label>
        <input type="email" id="email" name="email" class="input-field">
      </div>
      <div class="form-group">
        <label for="message" class="translate" data-translate-key="formmessage">Your message:</label>
        <textarea name="message" id="message" class="input-field textarea"></textarea>
      </div>
      <button type="submit" class="btn btn--outline translate" data-translate-key="formbutton">Send</button>
    </form>
    
    <script>
      import Toastify from 'toastify-js';
      import 'toastify-js/src/toastify.css';

      const emailInput = document.getElementById('email') as HTMLInputElement;
      const messageInput = document.getElementById('message') as HTMLTextAreaElement;
      const form = document.getElementById('my-form') as HTMLFormElement;
      const submitButton = document.getElementById('my-form-button') as HTMLButtonElement;

      const isValidEmail = (email: string): boolean => {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
      };

      const isValidText = (text: string): boolean => {
        return text.length >= 10 && text.length <= 1000;
      };

      const updateValidation = () => {
        const isEmailValid = isValidEmail(emailInput.value);
        const isTextValid = isValidText(messageInput.value);

        emailInput.style.borderColor = isEmailValid ? 'green' : 'red';
        messageInput.style.borderColor = isTextValid ? 'green' : 'red';
        submitButton.disabled = !(isEmailValid && isTextValid);
        submitButton.style.cursor = (isEmailValid && isTextValid) ? 'pointer' : 'not-allowed';
      };

      emailInput.addEventListener('input', updateValidation);
      messageInput.addEventListener('input', updateValidation);

      async function handleSubmit(event: Event) {
        event.preventDefault();

        const isEmailValid = isValidEmail(emailInput.value);
        const isTextValid = isValidText(messageInput.value);

        if (!(isEmailValid && isTextValid)) {
          showToast('Error', false);
          return;
        }

        try {
          const response = await fetch(form.action, {
            method: form.method,
            body: new FormData(form),
            headers: {
              'Accept': 'application/json',
            },
          });

          if (response.ok) {
            form.reset();
            showToast('Message Sent', true);
          } else {
            const data = await response.json();
            if (Object.prototype.hasOwnProperty.call(data, 'errors')) {
              const errorMessage = data['errors'].map((error: any) => error['message']).join(', ');
              showToast(errorMessage, false);
            } else {
              showToast('Error', false);
            }
          }
        } catch (error) {
          showToast('Error', false);
        }
      }

      form.addEventListener('submit', handleSubmit);

      function showToast(text: string, success: boolean) {
        const toastBackground = success ? getComputedStyle(document.body).getPropertyValue('--clr-primary') : 'linear-gradient(to right, #ff0000, #ff9999)';
        const toastTextColor = success ? getComputedStyle(document.body).getPropertyValue('--clr-bg') : undefined;

        Toastify({
          text,
          duration: 2000,
          close: true,
          gravity: 'bottom',
          position: 'center',
          stopOnFocus: true,
          style: {
            background: toastBackground,
            color: toastTextColor,
          },
        }).showToast();
      }
    </script>
  </section>
  
  <style is:global>
    .contact-form {
      max-width: 500px;
      margin: 0 auto;
      padding: 20px;
      background-color: transparent;
      box-shadow: var(--shadow);
      border-radius: 8px;
    }
  
    .form-group {
      margin-bottom: 20px;
    }
  
    .input-field, .textarea {
      width: 100%;
      padding: 10px;
      margin: 8px 0;
      border: 1px solid var(--clr-primary);
      border-radius: 4px;
      box-sizing: border-box;
    }
  
    .textarea {
      height: 150px;
      resize: none;
    }
  
    .btn--outline {
      display: block;
      margin: 0 auto;
      margin-top: 10px;
    }
  
    @media (max-width: 600px) {
      .contact-form {
        max-width: 100%;
      }
    }
  </style>